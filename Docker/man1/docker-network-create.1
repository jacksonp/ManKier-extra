.TH "DOCKER" "1" "May 2020" "Docker Community" "" 
.nh
.ad l


.SH NAME
.PP
docker\-network\-create \- Create a network


.SH SYNOPSIS
.PP
\fBdocker network create [OPTIONS] NETWORK\fP


.SH DESCRIPTION
.PP
Creates a new network. The \fB\fCDRIVER\fR accepts \fB\fCbridge\fR or \fB\fCoverlay\fR which are the
built\-in network drivers. If you have installed a third party or your own custom
network driver you can specify that \fB\fCDRIVER\fR here also. If you don't specify the
\fB\fC\-\-driver\fR option, the command automatically creates a \fB\fCbridge\fR network for you.
When you install Docker Engine it creates a \fB\fCbridge\fR network automatically. This
network corresponds to the \fB\fCdocker0\fR bridge that Engine has traditionally relied
on. When you launch a new container with  \fB\fCdocker run\fR it automatically connects to
this bridge network. You cannot remove this default bridge network but you can
create new ones using the \fB\fCnetwork create\fR command.

.PP
.RS

.nf
$ docker network create \-d bridge my\-bridge\-network

.fi
.RE

.PP
Bridge networks are isolated networks on a single Engine installation. If you
want to create a network that spans multiple Docker hosts each running an
Engine, you must create an \fB\fCoverlay\fR network. Unlike \fB\fCbridge\fR networks overlay
networks require some pre\-existing conditions before you can create one. These
conditions are:

.RS
.IP \(bu 2
Access to a key\-value store. Engine supports Consul, Etcd, and Zookeeper (Distributed store) key\-value stores.
.IP \(bu 2
A cluster of hosts with connectivity to the key\-value store.
.IP \(bu 2
A properly configured Engine \fB\fCdaemon\fR on each host in the cluster.

.RE

.PP
The \fB\fCdockerd\fR options that support the \fB\fCoverlay\fR network are:

.RS
.IP \(bu 2
\fB\fC\-\-cluster\-store\fR
.IP \(bu 2
\fB\fC\-\-cluster\-store\-opt\fR
.IP \(bu 2
\fB\fC\-\-cluster\-advertise\fR

.RE

.PP
To read more about these options and how to configure them, see "\fIGet started
with multi\-host
network\fP"
\[la]https://docs.docker.com/engine/userguide/networking/get-started-overlay/\[ra]\&.

.PP
It is also a good idea, though not required, that you install Docker Swarm on to
manage the cluster that makes up your network. Swarm provides sophisticated
discovery and server management that can assist your implementation.

.PP
Once you have prepared the \fB\fCoverlay\fR network prerequisites you simply choose a
Docker host in the cluster and issue the following to create the network:

.PP
.RS

.nf
$ docker network create \-d overlay my\-multihost\-network

.fi
.RE

.PP
Network names must be unique. The Docker daemon attempts to identify naming
conflicts but this is not guaranteed. It is the user's responsibility to avoid
name conflicts.

.SH Connect containers
.PP
When you start a container use the \fB\fC\-\-network\fR flag to connect it to a network.
This adds the \fB\fCbusybox\fR container to the \fB\fCmynet\fR network.

.PP
.RS

.nf
$ docker run \-itd \-\-network=mynet busybox

.fi
.RE

.PP
If you want to add a container to a network after the container is already
running use the \fB\fCdocker network connect\fR subcommand.

.PP
You can connect multiple containers to the same network. Once connected, the
containers can communicate using only another container's IP address or name.
For \fB\fCoverlay\fR networks or custom plugins that support multi\-host connectivity,
containers connected to the same multi\-host network but launched from different
Engines can also communicate in this way.

.PP
You can disconnect a container from a network using the \fB\fCdocker network
disconnect\fR command.

.SH Specifying advanced options
.PP
When you create a network, Engine creates a non\-overlapping subnetwork for the
network by default. This subnetwork is not a subdivision of an existing network.
It is purely for ip\-addressing purposes. You can override this default and
specify subnetwork values directly using the \fB\fC\-\-subnet\fR option. On a
\fB\fCbridge\fR network you can only create a single subnet:

.PP
.RS

.nf
$ docker network create \-d bridge \-\-subnet=192.168.0.0/16 br0

.fi
.RE

.PP
Additionally, you also specify the \fB\fC\-\-gateway\fR \fB\fC\-\-ip\-range\fR and \fB\fC\-\-aux\-address\fR
options.

.PP
.RS

.nf
$ docker network create \\
  \-\-driver=bridge \\
  \-\-subnet=172.28.0.0/16 \\
  \-\-ip\-range=172.28.5.0/24 \\
  \-\-gateway=172.28.5.254 \\
  br0

.fi
.RE

.PP
If you omit the \fB\fC\-\-gateway\fR flag the Engine selects one for you from inside a
preferred pool. For \fB\fCoverlay\fR networks and for network driver plugins that
support it you can create multiple subnetworks.

.PP
.RS

.nf
$ docker network create \-d overlay \\
  \-\-subnet=192.168.0.0/16 \\
  \-\-subnet=192.170.0.0/16 \\
  \-\-gateway=192.168.0.100 \\ 
  \-\-gateway=192.170.0.100 \\
  \-\-ip\-range=192.168.1.0/24 \\
  \-\-aux\-address="my\-router=192.168.1.5" \-\-aux\-address="my\-switch=192.168.1.6" \\
  \-\-aux\-address="my\-printer=192.170.1.5" \-\-aux\-address="my\-nas=192.170.1.6" \\
  my\-multihost\-network

.fi
.RE

.PP
Be sure that your subnetworks do not overlap. If they do, the network create
fails and Engine returns an error.

.SS Network internal mode
.PP
By default, when you connect a container to an \fB\fCoverlay\fR network, Docker also
connects a bridge network to it to provide external connectivity. If you want
to create an externally isolated \fB\fCoverlay\fR network, you can specify the
\fB\fC\-\-internal\fR option.

.SS Network ingress mode
.PP
You can create the network which will be used to provide the routing\-mesh in the
swarm cluster. You do so by specifying \fB\fC\-\-ingress\fR when creating the network. Only
one ingress network can be created at the time. The network can be removed only
if no services depend on it. Any option available when creating an overlay network
is also available when creating the ingress network, besides the \fB\fC\-\-attachable\fR option.

.PP
.RS

.nf
$ docker network create \-d overlay \\
  \-\-subnet=10.11.0.0/16 \\
  \-\-ingress \\
  \-\-opt com.docker.network.mtu=9216 \\
  \-\-opt encrypted=true \\
  my\-ingress\-network

.fi
.RE

.SS Run services on predefined networks
.PP
You can create services on the predefined docker networks \fB\fCbridge\fR and \fB\fChost\fR\&.

.PP
.RS

.nf
$ docker service create \-\-name my\-service \\
  \-\-network host \\
  \-\-replicas 2 \\
  busybox top

.fi
.RE

.SS Swarm networks with local scope drivers
.PP
You can create a swarm network with local scope network drivers. You do so
by promoting the network scope to \fB\fCswarm\fR during the creation of the network.
You will then be able to use this network when creating services.

.PP
.RS

.nf
$ docker network create \-d bridge \\
  \-\-scope swarm \\
  \-\-attachable \\
  swarm\-network

.fi
.RE

.PP
For network drivers which provide connectivity across hosts (ex. macvlan), if
node specific configurations are needed in order to plumb the network on each
host, you will supply that configuration via a configuration only network.
When you create the swarm scoped network, you will then specify the name of the
network which contains the configuration.

.PP
.RS

.nf
node1$ docker network create \-\-config\-only \-\-subnet 192.168.100.0/24 \-\-gateway 192.168.100.115 mv\-config
node2$ docker network create \-\-config\-only \-\-subnet 192.168.200.0/24 \-\-gateway 192.168.200.202 mv\-config
node1$ docker network create \-d macvlan \-\-scope swarm \-\-config\-from mv\-config \-\-attachable swarm\-network

.fi
.RE


.SH OPTIONS
.PP
\fB\-\-attachable\fP[=false]
    Enable manual container attachment

.PP
\fB\-\-aux\-address\fP=map[]
    Auxiliary IPv4 or IPv6 addresses used by Network driver

.PP
\fB\-\-config\-from\fP=""
    The network from which copying the configuration

.PP
\fB\-\-config\-only\fP[=false]
    Create a configuration only network

.PP
\fB\-d\fP, \fB\-\-driver\fP="bridge"
    Driver to manage the Network

.PP
\fB\-\-gateway\fP=[]
    IPv4 or IPv6 Gateway for the master subnet

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
    help for create

.PP
\fB\-\-ingress\fP[=false]
    Create swarm routing\-mesh network

.PP
\fB\-\-internal\fP[=false]
    Restrict external access to the network

.PP
\fB\-\-ip\-range\fP=[]
    Allocate container ip from a sub\-range

.PP
\fB\-\-ipam\-driver\fP="default"
    IP Address Management Driver

.PP
\fB\-\-ipam\-opt\fP=map[]
    Set IPAM driver specific options

.PP
\fB\-\-ipv6\fP[=false]
    Enable IPv6 networking

.PP
\fB\-\-label\fP=
    Set metadata on a network

.PP
\fB\-o\fP, \fB\-\-opt\fP=map[]
    Set driver specific options

.PP
\fB\-\-scope\fP=""
    Control the network's scope

.PP
\fB\-\-subnet\fP=[]
    Subnet in CIDR format that represents a network segment


.SH SEE ALSO
.PP
\fBdocker\-network(1)\fP
