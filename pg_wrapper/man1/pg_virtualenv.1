.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PG_VIRTUALENV 1"
.TH PG_VIRTUALENV 1 "2018-09-26" "Debian" "Debian PostgreSQL infrastructure"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pg_virtualenv \- Create a throw\-away PostgreSQL environment for running regression tests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBpg_virtualenv\fR [\fI\s-1OPTIONS\s0\fR] [\fB\-v\fR '\fIversion ...\fR'] [\fIcommand\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBpg_virtualenv\fR creates a virtual PostgreSQL server environment, and sets
environment variables such that \fIcommand\fR can access the PostgreSQL database
server(s). The servers are destroyed when \fIcommand\fR exits.
.PP
The environment variables \fB\s-1PGHOST\s0\fR, \fB\s-1PGDATABASE\s0\fR, \fB\s-1PGUSER\s0\fR, and
\&\fB\s-1PGPASSWORD\s0\fR will be set. Per default, a single new cluster is created,
using the newest PostgreSQL server version installed. The cluster will use the
first available port number starting from \fB5432\fR, and \fB\s-1PGPORT\s0\fR will be set.
.PP
When clusters for more than one versions are created, they will differ in the
port number used, and \fB\s-1PGPORT\s0\fR is not set. The clusters are
named \fIversion\fR/regress. To access a cluster, set
\&\fBPGCLUSTER=\fR\fIversion\fR\fB/regress\fR. For ease of access, the clusters are also
registered in \fI/etc/postgresql\-common/pg_service.conf\fR, with the version
number as cluster name. Clusters can be accessed by passing the connection
string "\fBservice=\fR\fIversion\fR", e.g. \fBpsql service=9.2\fR.
.PP
When invoked as root, the clusters are created in \fI/etc/postgresql/\fR as usual;
for other users, \fB\s-1PG_CLUSTER_CONF_ROOT\s0\fR and \fB\s-1PGSYSCONFDIR\s0\fR are
set to a temporary directory where all files belonging to the clusters are
created.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a\fR" 4
.IX Item "-a"
Use all PostgreSQL server versions installed.
.IP "\fB\-v\fR \fIversion ...\fR" 4
.IX Item "-v version ..."
Use these versions (space-separated list).
.IP "\fB\-c\fR \fIpg_createcluster options\fR" 4
.IX Item "-c pg_createcluster options"
Extra options to pass to \fBpg_createcluster\fR.
.IP "\fB\-i\fR \fIinitdb options\fR" 4
.IX Item "-i initdb options"
Extra initdb options to pass to \fBpg_createcluster\fR.
.IP "\fB\-o\fR \fIguc\fR\fB=\fR\fIvalue\fR" 4
.IX Item "-o guc=value"
Configuration option to set in the \f(CW\*(C`postgresql.conf\*(C'\fR file, passed to
\&\fBpg_createcluster\fR.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Launch a shell inside the virtual environment when \fIcommand\fR fails.
.IP "\fB\-t\fR" 4
.IX Item "-t"
Install clusters in a temporary directory, even when running as root.
.IP "\fB\-h\fR" 4
.IX Item "-h"
Show program help.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\&  # pg_virtualenv make check
.Ve
.SH "NOTES"
.IX Header "NOTES"
When run with \fBfakeroot\fR\|(1), \fBpg_virtualenv\fR will fall back to the non-root mode
of operation. Running \*(L"fakeroot pg_virtualenv\*(R" as root will fail, though.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1PG_VIRTUALENV_NEWPID\s0\fR=yes" 4
.IX Item "PG_VIRTUALENV_NEWPID=yes"
When non-empty, \fBpg_virtualenv\fR will re-exec itself using \fBnewpid\fR\|(1).
.IP "\fB\s-1PG_VIRTUALENV_UNSHARE\s0\fR=\fIflags\fR" 4
.IX Item "PG_VIRTUALENV_UNSHARE=flags"
When non-empty, \fBpg_virtualenv\fR will re-exec itself using \fBunshare\fR\|(1) using
these flags.
.IP "\fB\s-1PGPORT\s0\fR=\fIn\fR" 4
.IX Item "PGPORT=n"
When set, the value is used for the (single) cluster created.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBinitdb\fR\|(1), \fBpg_createcluster\fR\|(1).
.SH "AUTHOR"
.IX Header "AUTHOR"
Christoph Berg <myon@debian.org>
