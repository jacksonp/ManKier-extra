'\" t
.\"     Title: \fBnixos-generate-config\fR
  
.\"    Author: Eelco Dolstra
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 01/01/1970
.\"    Manual: NixOS Reference Pages
.\"    Source: NixOS
.\"  Language: English
.\"
.TH "\FBNIXOS\-GENERATE\-" "8" "01/01/1970" "NixOS" "NixOS Reference Pages"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" enable line breaks after slashes
.cflags 4 /
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nixos-generate-config
__ \- generate NixOS configuration modules
.SH "SYNOPSIS"
.HP \w'\fBnixos\-generate\-config\fR\ 'u
\fBnixos\-generate\-config\fR [\fB\-\-force\fR] [\fB\-\-root\fR\ \fIroot\fR] [\fB\-\-dir\fR\ \fIdir\fR]
.SH "DESCRIPTION"
.PP
This command writes two NixOS configuration modules:
.PP
\fB/etc/nixos/hardware\-configuration\&.nix\fR
.RS 4
This module sets NixOS configuration options based on your current hardware configuration\&. In particular, it sets the
\fBfileSystem\fR
option to reflect all currently mounted file systems, the
\fBswapDevices\fR
option to reflect active swap devices, and the
\fBboot\&.initrd\&.*\fR
options to ensure that the initial ramdisk contains any kernel modules necessary for mounting the root file system\&.
.sp
If this file already exists, it is overwritten\&. Thus, you should not modify it manually\&. Rather, you should include it from your
/etc/nixos/configuration\&.nix, and re\-run
\fBnixos\-generate\-config\fR
to update it whenever your hardware configuration changes\&.
.RE
.PP
\fB/etc/nixos/configuration\&.nix\fR
.RS 4
This is the main NixOS system configuration module\&. If it already exists, it\(cqs left unchanged\&. Otherwise,
\fBnixos\-generate\-config\fR
will write a template for you to customise\&.
.RE
.SH "OPTIONS"
.PP
This command accepts the following options:
.PP
\fB\-\-root\fR
.RS 4
If this option is given, treat the directory
\fIroot\fR
as the root of the file system\&. This means that configuration files will be written to
\fIroot\fR/etc/nixos, and that any file systems outside of
\fIroot\fR
are ignored for the purpose of generating the
\fBfileSystems\fR
option\&.
.RE
.PP
\fB\-\-dir\fR
.RS 4
If this option is given, write the configuration files to the directory
\fIdir\fR
instead of
/etc/nixos\&.
.RE
.PP
\fB\-\-force\fR
.RS 4
Overwrite
/etc/nixos/configuration\&.nix
if it already exists\&.
.RE
.PP
\fB\-\-no\-filesystems\fR
.RS 4
Omit everything concerning file systems and swap devices from the hardware configuration\&.
.RE
.PP
\fB\-\-show\-hardware\-config\fR
.RS 4
Don\*(Aqt generate
configuration\&.nix
or
hardware\-configuration\&.nix
and print the hardware configuration to stdout only\&.
.RE
.SH "EXAMPLES"
.PP
This command is typically used during NixOS installation to write initial configuration modules\&. For example, if you created and mounted the target file systems on
/mnt
and
/mnt/boot, you would run:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nixos\-generate\-config \-\-root /mnt
.fi
.if n \{\
.RE
.\}
.sp
The resulting file
/mnt/etc/nixos/hardware\-configuration\&.nix
might look like this:
.sp
.if n \{\
.RS 4
.\}
.nf
# Do not modify this file!  It was generated by \(oqnixos\-generate\-config\(cq
# and may be overwritten by future invocations\&.  Please make changes
# to /etc/nixos/configuration\&.nix instead\&.
{ config, pkgs, \&.\&.\&. }:

{
  imports =
    [ <nixos/modules/installer/scan/not\-detected\&.nix>
    ];

  boot\&.initrd\&.availableKernelModules = [ "ehci_hcd" "ahci" ];
  boot\&.kernelModules = [ "kvm\-intel" ];
  boot\&.extraModulePackages = [ ];

  fileSystems\&."/" =
    { device = "/dev/disk/by\-label/nixos";
      fsType = "ext3";
      options = [ "rw" "data=ordered" "relatime" ];
    };

  fileSystems\&."/boot" =
    { device = "/dev/sda1";
      fsType = "ext3";
      options = [ "rw" "errors=continue" "user_xattr" "acl" "barrier=1" "data=writeback" "relatime" ];
    };

  swapDevices =
    [ { device = "/dev/sda2"; }
    ];

  nix\&.maxJobs = 8;
}
.fi
.if n \{\
.RE
.\}
.sp
It will also create a basic
/mnt/etc/nixos/configuration\&.nix, which you should edit to customise the logical configuration of your system\&. This file includes the result of the hardware scan as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
  imports = [ \&./hardware\-configuration\&.nix ];
.fi
.if n \{\
.RE
.\}
.PP
After installation, if your hardware configuration changes, you can run:
.sp
.if n \{\
.RS 4
.\}
.nf
$ nixos\-generate\-config
.fi
.if n \{\
.RE
.\}
.sp
to update
/etc/nixos/hardware\-configuration\&.nix\&. Your
/etc/nixos/configuration\&.nix
will
\fInot\fR
be overwritten\&.
.SH "AUTHOR"
.PP
\fBEelco Dolstra\fR
.RS 4
Author
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2007-2018 Eelco Dolstra
.br
