'\" t
.\"     Title: \fBnixos-build-vms\fR
  
.\"    Author: Eelco Dolstra
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 01/01/1970
.\"    Manual: NixOS Reference Pages
.\"    Source: NixOS
.\"  Language: English
.\"
.TH "\FBNIXOS\-BUILD\-VMS" "8" "01/01/1970" "NixOS" "NixOS Reference Pages"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" enable line breaks after slashes
.cflags 4 /
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
nixos-build-vms
__ \- build a network of virtual machines from a network of NixOS configurations
.SH "SYNOPSIS"
.HP \w'\fBnixos\-build\-vms\fR\ 'u
\fBnixos\-build\-vms\fR [\fB\-\-show\-trace\fR] [\fB\-\-no\-out\-link\fR] [\fB\-\-help\fR] \fInetwork\&.nix\fR
.SH "DESCRIPTION"
.PP
This command builds a network of QEMU\-KVM virtual machines of a Nix expression specifying a network of NixOS machines\&. The virtual network can be started by executing the
bin/run\-vms
shell script that is generated by this command\&. By default, a
result
symlink is produced that points to the generated virtual network\&.
.PP
A network Nix expression has the following structure:
.sp
.if n \{\
.RS 4
.\}
.nf
{
  test1 = {pkgs, config, \&.\&.\&.}:
    {
      services\&.openssh\&.enable = true;
      nixpkgs\&.localSystem\&.system = "i686\-linux";
      deployment\&.targetHost = "test1\&.example\&.net";

      # Other NixOS options
    };

  test2 = {pkgs, config, \&.\&.\&.}:
    {
      services\&.openssh\&.enable = true;
      services\&.httpd\&.enable = true;
      environment\&.systemPackages = [ pkgs\&.lynx ];
      nixpkgs\&.localSystem\&.system = "x86_64\-linux";
      deployment\&.targetHost = "test2\&.example\&.net";

      # Other NixOS options
    };
}
.fi
.if n \{\
.RE
.\}
.sp
Each attribute in the expression represents a machine in the network (e\&.g\&.
\fItest1\fR
and
\fItest2\fR) referring to a function defining a NixOS configuration\&. In each NixOS configuration, two attributes have a special meaning\&. The
\fIdeployment\&.targetHost\fR
specifies the address (domain name or IP address) of the system which is used by
\fBssh\fR
to perform remote deployment operations\&. The
\fInixpkgs\&.localSystem\&.system\fR
attribute can be used to specify an architecture for the target machine, such as
\fIi686\-linux\fR
which builds a 32\-bit NixOS configuration\&. Omitting this property will build the configuration for the same architecture as the host system\&.
.SH "OPTIONS"
.PP
This command accepts the following options:
.PP
\fB\-\-show\-trace\fR
.RS 4
Shows a trace of the output\&.
.RE
.PP
\fB\-\-no\-out\-link\fR
.RS 4
Do not create a \*(Aqresult\*(Aq symlink\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Shows the usage of this command to the user\&.
.RE
.SH "AUTHOR"
.PP
\fBEelco Dolstra\fR
.RS 4
Author
.RE
.SH "COPYRIGHT"
.br
Copyright \(co 2007-2018 Eelco Dolstra
.br
